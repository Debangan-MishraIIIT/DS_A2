// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BFTServiceClient is the client API for BFTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BFTServiceClient interface {
	SendOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
}

type bFTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBFTServiceClient(cc grpc.ClientConnInterface) BFTServiceClient {
	return &bFTServiceClient{cc}
}

func (c *bFTServiceClient) SendOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/BFT.BFTService/SendOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BFTServiceServer is the server API for BFTService service.
// All implementations must embed UnimplementedBFTServiceServer
// for forward compatibility
type BFTServiceServer interface {
	SendOrder(context.Context, *OrderRequest) (*OrderResponse, error)
	mustEmbedUnimplementedBFTServiceServer()
}

// UnimplementedBFTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBFTServiceServer struct {
}

func (UnimplementedBFTServiceServer) SendOrder(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOrder not implemented")
}
func (UnimplementedBFTServiceServer) mustEmbedUnimplementedBFTServiceServer() {}

// UnsafeBFTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BFTServiceServer will
// result in compilation errors.
type UnsafeBFTServiceServer interface {
	mustEmbedUnimplementedBFTServiceServer()
}

func RegisterBFTServiceServer(s grpc.ServiceRegistrar, srv BFTServiceServer) {
	s.RegisterService(&BFTService_ServiceDesc, srv)
}

func _BFTService_SendOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFTServiceServer).SendOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BFT.BFTService/SendOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFTServiceServer).SendOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BFTService_ServiceDesc is the grpc.ServiceDesc for BFTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BFTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BFT.BFTService",
	HandlerType: (*BFTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOrder",
			Handler:    _BFTService_SendOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utils.proto",
}
