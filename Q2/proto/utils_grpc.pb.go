// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterServiceClient is the client API for MasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterServiceClient interface {
	// Worker asks master if it should map
	ShouldMap(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*MapResponse, error)
	// Worker asks master if it should reduce
	ShouldReduce(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*ReduceResponse, error)
	// Worker notifies that mapping is complete
	MapDone(ctx context.Context, in *WorkerDone, opts ...grpc.CallOption) (*AckResponse, error)
	// Worker notifies that reducing is complete
	ReduceDone(ctx context.Context, in *WorkerDone, opts ...grpc.CallOption) (*AckResponse, error)
	// Worker polls for termination
	ShouldTerminate(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*TerminateResponse, error)
}

type masterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterServiceClient(cc grpc.ClientConnInterface) MasterServiceClient {
	return &masterServiceClient{cc}
}

func (c *masterServiceClient) ShouldMap(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*MapResponse, error) {
	out := new(MapResponse)
	err := c.cc.Invoke(ctx, "/masterworker.MasterService/ShouldMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ShouldReduce(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*ReduceResponse, error) {
	out := new(ReduceResponse)
	err := c.cc.Invoke(ctx, "/masterworker.MasterService/ShouldReduce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) MapDone(ctx context.Context, in *WorkerDone, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, "/masterworker.MasterService/MapDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ReduceDone(ctx context.Context, in *WorkerDone, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, "/masterworker.MasterService/ReduceDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ShouldTerminate(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*TerminateResponse, error) {
	out := new(TerminateResponse)
	err := c.cc.Invoke(ctx, "/masterworker.MasterService/ShouldTerminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServiceServer is the server API for MasterService service.
// All implementations must embed UnimplementedMasterServiceServer
// for forward compatibility
type MasterServiceServer interface {
	// Worker asks master if it should map
	ShouldMap(context.Context, *WorkerRequest) (*MapResponse, error)
	// Worker asks master if it should reduce
	ShouldReduce(context.Context, *WorkerRequest) (*ReduceResponse, error)
	// Worker notifies that mapping is complete
	MapDone(context.Context, *WorkerDone) (*AckResponse, error)
	// Worker notifies that reducing is complete
	ReduceDone(context.Context, *WorkerDone) (*AckResponse, error)
	// Worker polls for termination
	ShouldTerminate(context.Context, *WorkerRequest) (*TerminateResponse, error)
	mustEmbedUnimplementedMasterServiceServer()
}

// UnimplementedMasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServiceServer struct {
}

func (UnimplementedMasterServiceServer) ShouldMap(context.Context, *WorkerRequest) (*MapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldMap not implemented")
}
func (UnimplementedMasterServiceServer) ShouldReduce(context.Context, *WorkerRequest) (*ReduceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldReduce not implemented")
}
func (UnimplementedMasterServiceServer) MapDone(context.Context, *WorkerDone) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapDone not implemented")
}
func (UnimplementedMasterServiceServer) ReduceDone(context.Context, *WorkerDone) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceDone not implemented")
}
func (UnimplementedMasterServiceServer) ShouldTerminate(context.Context, *WorkerRequest) (*TerminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldTerminate not implemented")
}
func (UnimplementedMasterServiceServer) mustEmbedUnimplementedMasterServiceServer() {}

// UnsafeMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServiceServer will
// result in compilation errors.
type UnsafeMasterServiceServer interface {
	mustEmbedUnimplementedMasterServiceServer()
}

func RegisterMasterServiceServer(s grpc.ServiceRegistrar, srv MasterServiceServer) {
	s.RegisterService(&MasterService_ServiceDesc, srv)
}

func _MasterService_ShouldMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ShouldMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/masterworker.MasterService/ShouldMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ShouldMap(ctx, req.(*WorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ShouldReduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ShouldReduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/masterworker.MasterService/ShouldReduce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ShouldReduce(ctx, req.(*WorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_MapDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerDone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).MapDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/masterworker.MasterService/MapDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).MapDone(ctx, req.(*WorkerDone))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ReduceDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerDone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ReduceDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/masterworker.MasterService/ReduceDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ReduceDone(ctx, req.(*WorkerDone))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ShouldTerminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ShouldTerminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/masterworker.MasterService/ShouldTerminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ShouldTerminate(ctx, req.(*WorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterService_ServiceDesc is the grpc.ServiceDesc for MasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "masterworker.MasterService",
	HandlerType: (*MasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShouldMap",
			Handler:    _MasterService_ShouldMap_Handler,
		},
		{
			MethodName: "ShouldReduce",
			Handler:    _MasterService_ShouldReduce_Handler,
		},
		{
			MethodName: "MapDone",
			Handler:    _MasterService_MapDone_Handler,
		},
		{
			MethodName: "ReduceDone",
			Handler:    _MasterService_ReduceDone_Handler,
		},
		{
			MethodName: "ShouldTerminate",
			Handler:    _MasterService_ShouldTerminate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utils.proto",
}
