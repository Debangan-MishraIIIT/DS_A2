// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LBCommunicationClient is the client API for LBCommunication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LBCommunicationClient interface {
	// simple RPC
	GreetLB(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error)
}

type lBCommunicationClient struct {
	cc grpc.ClientConnInterface
}

func NewLBCommunicationClient(cc grpc.ClientConnInterface) LBCommunicationClient {
	return &lBCommunicationClient{cc}
}

func (c *lBCommunicationClient) GreetLB(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, "/lb_service.LBCommunication/GreetLB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LBCommunicationServer is the server API for LBCommunication service.
// All implementations must embed UnimplementedLBCommunicationServer
// for forward compatibility
type LBCommunicationServer interface {
	// simple RPC
	GreetLB(context.Context, *ClientInfo) (*ServerInfo, error)
	mustEmbedUnimplementedLBCommunicationServer()
}

// UnimplementedLBCommunicationServer must be embedded to have forward compatible implementations.
type UnimplementedLBCommunicationServer struct {
}

func (UnimplementedLBCommunicationServer) GreetLB(context.Context, *ClientInfo) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetLB not implemented")
}
func (UnimplementedLBCommunicationServer) mustEmbedUnimplementedLBCommunicationServer() {}

// UnsafeLBCommunicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LBCommunicationServer will
// result in compilation errors.
type UnsafeLBCommunicationServer interface {
	mustEmbedUnimplementedLBCommunicationServer()
}

func RegisterLBCommunicationServer(s grpc.ServiceRegistrar, srv LBCommunicationServer) {
	s.RegisterService(&LBCommunication_ServiceDesc, srv)
}

func _LBCommunication_GreetLB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBCommunicationServer).GreetLB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb_service.LBCommunication/GreetLB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBCommunicationServer).GreetLB(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// LBCommunication_ServiceDesc is the grpc.ServiceDesc for LBCommunication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LBCommunication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lb_service.LBCommunication",
	HandlerType: (*LBCommunicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GreetLB",
			Handler:    _LBCommunication_GreetLB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utils.proto",
}

// DirectCommunicationClient is the client API for DirectCommunication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectCommunicationClient interface {
	// simple RPC
	SleepRequest(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*SleepResponse, error)
}

type directCommunicationClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectCommunicationClient(cc grpc.ClientConnInterface) DirectCommunicationClient {
	return &directCommunicationClient{cc}
}

func (c *directCommunicationClient) SleepRequest(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*SleepResponse, error) {
	out := new(SleepResponse)
	err := c.cc.Invoke(ctx, "/lb_service.DirectCommunication/SleepRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectCommunicationServer is the server API for DirectCommunication service.
// All implementations must embed UnimplementedDirectCommunicationServer
// for forward compatibility
type DirectCommunicationServer interface {
	// simple RPC
	SleepRequest(context.Context, *ClientRequest) (*SleepResponse, error)
	mustEmbedUnimplementedDirectCommunicationServer()
}

// UnimplementedDirectCommunicationServer must be embedded to have forward compatible implementations.
type UnimplementedDirectCommunicationServer struct {
}

func (UnimplementedDirectCommunicationServer) SleepRequest(context.Context, *ClientRequest) (*SleepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SleepRequest not implemented")
}
func (UnimplementedDirectCommunicationServer) mustEmbedUnimplementedDirectCommunicationServer() {}

// UnsafeDirectCommunicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectCommunicationServer will
// result in compilation errors.
type UnsafeDirectCommunicationServer interface {
	mustEmbedUnimplementedDirectCommunicationServer()
}

func RegisterDirectCommunicationServer(s grpc.ServiceRegistrar, srv DirectCommunicationServer) {
	s.RegisterService(&DirectCommunication_ServiceDesc, srv)
}

func _DirectCommunication_SleepRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectCommunicationServer).SleepRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb_service.DirectCommunication/SleepRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectCommunicationServer).SleepRequest(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectCommunication_ServiceDesc is the grpc.ServiceDesc for DirectCommunication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectCommunication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lb_service.DirectCommunication",
	HandlerType: (*DirectCommunicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SleepRequest",
			Handler:    _DirectCommunication_SleepRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utils.proto",
}

// MemoryServiceClient is the client API for MemoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemoryServiceClient interface {
	SendMemoryUsage(ctx context.Context, in *MemoryRequest, opts ...grpc.CallOption) (*MemoryResponse, error)
}

type memoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemoryServiceClient(cc grpc.ClientConnInterface) MemoryServiceClient {
	return &memoryServiceClient{cc}
}

func (c *memoryServiceClient) SendMemoryUsage(ctx context.Context, in *MemoryRequest, opts ...grpc.CallOption) (*MemoryResponse, error) {
	out := new(MemoryResponse)
	err := c.cc.Invoke(ctx, "/lb_service.MemoryService/SendMemoryUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemoryServiceServer is the server API for MemoryService service.
// All implementations must embed UnimplementedMemoryServiceServer
// for forward compatibility
type MemoryServiceServer interface {
	SendMemoryUsage(context.Context, *MemoryRequest) (*MemoryResponse, error)
	mustEmbedUnimplementedMemoryServiceServer()
}

// UnimplementedMemoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemoryServiceServer struct {
}

func (UnimplementedMemoryServiceServer) SendMemoryUsage(context.Context, *MemoryRequest) (*MemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMemoryUsage not implemented")
}
func (UnimplementedMemoryServiceServer) mustEmbedUnimplementedMemoryServiceServer() {}

// UnsafeMemoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemoryServiceServer will
// result in compilation errors.
type UnsafeMemoryServiceServer interface {
	mustEmbedUnimplementedMemoryServiceServer()
}

func RegisterMemoryServiceServer(s grpc.ServiceRegistrar, srv MemoryServiceServer) {
	s.RegisterService(&MemoryService_ServiceDesc, srv)
}

func _MemoryService_SendMemoryUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServiceServer).SendMemoryUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb_service.MemoryService/SendMemoryUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServiceServer).SendMemoryUsage(ctx, req.(*MemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemoryService_ServiceDesc is the grpc.ServiceDesc for MemoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lb_service.MemoryService",
	HandlerType: (*MemoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMemoryUsage",
			Handler:    _MemoryService_SendMemoryUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utils.proto",
}
